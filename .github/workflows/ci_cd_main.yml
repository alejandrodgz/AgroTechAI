name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test-python:
    runs-on: ubuntu-22.04
    name: Python Tests & Quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Python tests and quality checks
        id: python-tests
        uses: ./.github/actions/python-tests
        with:
          python-version: '3.12'

      - name: Upload Python coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: python-coverage-reports
          path: ${{ steps.python-tests.outputs.coverage-path }}

  test-javascript:
    runs-on: ubuntu-22.04
    name: JavaScript Tests & Quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run JavaScript tests and quality checks
        id: js-tests
        uses: ./.github/actions/javascript-tests
        with:
          node-version: '20.18.3'

      - name: Upload JavaScript coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: javascript-coverage-reports
          path: ${{ steps.js-tests.outputs.coverage-path }}

  check-code-statically:
    runs-on: ubuntu-22.04
    name: SonarCloud Analysis
    needs: [test-python, test-javascript]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run static code analysis
        uses: ./.github/actions/static-analysis
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          python-coverage-artifact: python-coverage-reports
          javascript-coverage-artifact: javascript-coverage-reports
          debug-enabled: 'false'

  build-agrotech-app-image:
    runs-on: ubuntu-22.04
    name: Docker Build and Push API
    needs: [check-code-statically]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and push Docker image
        id: docker-push
        uses: ./.github/actions/docker-push
        with:
          dockerhub-username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}
          image-name: agrotech-ai-app
          tag-version: ${{ github.sha }}
          context-path: '.'
          dockerfile-path: 'env-deployment/Dockerfile'
          push-as-latest: 'false'

# -------------------------------------
  # Job de Despliegue CloudFormation Staging
  # -------------------------------------
  deploy-cfn-staging:
    needs: build-agrotech-app-image # Depende del job anterior (necesita image_uri)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Solo en push a main
    outputs:
      alb_url_staging: ${{ steps.get_stack_outputs.outputs.alb_url }}
      cluster_name_staging: "agrotech-staging-cluster"
      service_name_staging: "agrotech-staging-service"

    steps:
      # 1. Checkout del código (para acceder a template.yaml)
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configurar credenciales de AWS (CON SESSION TOKEN)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # <--- USO DEL SESSION TOKEN
          aws-region: us-east-1

      # 3. Desplegar/Actualizar el stack CloudFormation de Staging
      - name: Deploy CloudFormation Staging Stack
        run: |
          # Reconstruir la URI de la imagen usando el secreto y las salidas separadas
          IMAGE_URI="${{ secrets.DOCKERHUB_USERNAME }}/${{ needs.build-test-publish.outputs.repo_name }}:${{ needs.build-test-publish.outputs.image_tag }}"
          echo "Deploying Image URI: $IMAGE_URI" # Log para verificar (el username se ocultará aquí)

          aws cloudformation deploy \
            --template-file template.yaml \
            --stack-name agrotech-staging-stack \
            --parameter-overrides \
              EnvironmentName=staging \
              DockerImageUri=$IMAGE_URI \
              LabRoleArn=${{ secrets.LAB_ROLE_ARN }} \
              VpcId=${{ secrets.VPC_ID }} \
              SubnetIds="${{ secrets.SUBNET_IDS }}" \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changes # No falla si no hay cambios en la plantilla

      # 4. Obtener las salidas del Stack CloudFormation Staging
      - name: Get Staging Stack Outputs
        id: get_stack_outputs
        run: |
          # Instalar jq si no está presente (común en ubuntu-latest, pero por si acaso)
          if ! command -v jq &> /dev/null; then
             sudo apt-get update && sudo apt-get install -y jq
          fi

          STACK_OUTPUTS=$(aws cloudformation describe-stacks --stack-name agrotech-staging-stack --query "Stacks[0].Outputs" --region us-east-1 --output json)
          echo "Raw Stack Outputs: $STACK_OUTPUTS" # Log para depuración

          # Extraer la URL del ALB (ALBDnsName)
          ALB_URL=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="ALBDnsName") | .OutputValue')

          if [ -z "$ALB_URL" ] || [ "$ALB_URL" == "null" ]; then
            echo "Error: No se pudo obtener ALBDnsName del stack de Staging."
            exit 1
          fi

          # Añadir http:// al inicio ya que el DNSName no lo incluye
          ALB_URL_HTTP="http://${ALB_URL}/"
          echo "ALB URL Staging: $ALB_URL_HTTP"
          echo "alb_url=${ALB_URL_HTTP}" >> $GITHUB_OUTPUT

  # -------------------------------------
  # Job de Actualización Servicio Staging (ECS - Forzar despliegue)
  # -------------------------------------
  update-service-staging:
    # Depende de que CFN haya actualizado la Task Definition
    needs: [build-agrotech-app-image, deploy-cfn-staging]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      # 1. Configurar credenciales de AWS (CON SESSION TOKEN)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # <--- USO DEL SESSION TOKEN
          aws-region: us-east-1

      # 2. Forzar un nuevo despliegue en el servicio ECS de Staging
      - name: Force New Deployment ECS Service Staging
        run: |
          echo "Forcing new deployment for Staging service..."
          aws ecs update-service --cluster ${{ needs.deploy-cfn-staging.outputs.cluster_name_staging }} \
                                --service ${{ needs.deploy-cfn-staging.outputs.service_name_staging }} \
                                --force-new-deployment \
                                --region us-east-1
          # Esperar a que el despliegue se estabilice
          echo "Waiting for Staging service deployment to stabilize..."
          aws ecs wait services-stable --cluster ${{ needs.deploy-cfn-staging.outputs.cluster_name_staging }} --services ${{ needs.deploy-cfn-staging.outputs.service_name_staging }} --region us-east-1
          echo "Staging service deployment stable."

  # -------------------------------------
  # Job de Pruebas de Aceptación en Staging
  # -------------------------------------
  # test-staging:
  #   needs: [update-service-staging, deploy-cfn-staging] # Depende de que el servicio esté estable con la nueva versión
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'

  #   steps:
  #     # 1. Checkout del código (para acceder a las pruebas)
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     # 2. Configurar Python
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.12'

  #     # 3. Instalar dependencias de prueba
  #     - name: Install test dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt # Incluye selenium, pytest

  #     # 4. Ejecutar pruebas de aceptación contra el entorno de Staging
  #     - name: Run Acceptance Tests against Staging
  #       env:
  #         APP_BASE_URL: ${{ needs.deploy-cfn-staging.outputs.alb_url_staging }} # URL del ALB de Staging desde salidas
  #       run: |
  #         echo "Running acceptance tests against: $APP_BASE_URL"
  #         sleep 30 # Espera prudencial para el registro del target en el ALB
  #         pytest tests/test_acceptance_app.py # Ejecutar las pruebas de aceptación

  # -------------------------------------
  # Job de Despliegue CloudFormation Producción
  # -------------------------------------
  deploy-cfn-prod:
    needs: [build-agrotech-app-image] # Depende de la imagen y de que Staging esté OK
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs: # Definir salida para la URL del ALB de producción
      alb_url_prod: ${{ steps.get_stack_outputs.outputs.alb_url }}
      cluster_name_prod: "agrotech-production-cluster"
      service_name_prod: "agrotech-production-service"

    steps:
      # 1. Checkout del código
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configurar credenciales de AWS (CON SESSION TOKEN)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # <--- USO DEL SESSION TOKEN
          aws-region: us-east-1

      # 3. Desplegar/Actualizar el stack CloudFormation de Producción
      - name: Deploy CloudFormation Production Stack
        run: |
          # Reconstruir la URI de la imagen usando el secreto y las salidas separadas
          IMAGE_URI="${{ secrets.DOCKERHUB_USERNAME }}/${{ needs.build-test-publish.outputs.repo_name }}:${{ needs.build-test-publish.outputs.image_tag }}"
          echo "Deploying Image URI: $IMAGE_URI" # Log para verificar

          aws cloudformation deploy \
            --template-file template.yaml \
            --stack-name agrotech-production-stack \
            --parameter-overrides \
              EnvironmentName=production \
              DockerImageUri=$IMAGE_URI \
              LabRoleArn=${{ secrets.LAB_ROLE_ARN }} \
              VpcId=${{ secrets.VPC_ID }} \
              SubnetIds="${{ secrets.SUBNET_IDS }}" \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changes

      # 4. Obtener las salidas del Stack CloudFormation Producción
      - name: Get Production Stack Outputs
        id: get_stack_outputs
        run: |
          # Instalar jq si no está presente
          if ! command -v jq &> /dev/null; then
             sudo apt-get update && sudo apt-get install -y jq
          fi

          STACK_OUTPUTS=$(aws cloudformation describe-stacks --stack-name agrotech-production-stack --query "Stacks[0].Outputs" --region us-east-1 --output json)
          echo "Raw Stack Outputs: $STACK_OUTPUTS" # Log

          # Extraer la URL del ALB (ALBDnsName)
          ALB_URL=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="ALBDnsName") | .OutputValue')

          if [ -z "$ALB_URL" ] || [ "$ALB_URL" == "null" ]; then
            echo "Error: No se pudo obtener ALBDnsName del stack de Producción."
            exit 1
          fi

          # Añadir http:// al inicio
          ALB_URL_HTTP="http://${ALB_URL}/"
          echo "ALB URL Production: $ALB_URL_HTTP"
          echo "alb_url=${ALB_URL_HTTP}" >> $GITHUB_OUTPUT

  # -------------------------------------
  # Job de Actualización Servicio Producción (ECS - Forzar despliegue)
  # -------------------------------------
  update-service-prod:
    needs: [deploy-cfn-prod] # Depende de que CFN haya actualizado la Task Def de Prod
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      # 1. Configurar credenciales de AWS (CON SESSION TOKEN)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # <--- USO DEL SESSION TOKEN
          aws-region: us-east-1

      # 2. Forzar un nuevo despliegue en el servicio ECS de Producción
      - name: Force New Deployment ECS Service Production
        run: |
          echo "Forcing new deployment for Production service..."
          aws ecs update-service --cluster ${{ needs.deploy-cfn-prod.outputs.cluster_name_prod }} \
                                --service ${{ needs.deploy-cfn-prod.outputs.service_name_prod }} \
                                --force-new-deployment \
                                --region us-east-1
          # Esperar a que el despliegue se estabilice
          echo "Waiting for Production service deployment to stabilize..."
          aws ecs wait services-stable --cluster ${{ needs.deploy-cfn-prod.outputs.cluster_name_prod }} --services ${{ needs.deploy-cfn-prod.outputs.service_name_prod }} --region us-east-1
          echo "Production service deployment stable."

  # -------------------------------------
  # Job de Pruebas de Humo en Producción
  # -------------------------------------
  # smoke-test-prod:
  #   needs: [update-service-prod, deploy-cfn-prod] # Depende de que el servicio de prod esté estable
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'

  #   steps:
  #     # 1. Checkout del código
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     # 2. Configurar Python
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.12'

  #     # 3. Instalar dependencias de prueba
  #     - name: Install test dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt

  #     # 4. Ejecutar pruebas de humo contra el entorno de Producción
  #     - name: Run Smoke Tests against Production
  #       env:
  #         APP_BASE_URL: ${{ needs.deploy-cfn-prod.outputs.alb_url_prod }} # URL del ALB de Producción desde salidas
  #       run: |
  #         echo "Running smoke tests against: $APP_BASE_URL"
  #         sleep 30 # Espera prudencial
  #         pytest tests/test_smoke_app.py # Ejecutar las pruebas de humo